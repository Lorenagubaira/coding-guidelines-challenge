{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","webpackCompilationHash":"3489a8551730156b6610","result":{"data":{"deck":{"id":"548f554b-9f09-5069-bd9b-f3c292296d4e","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = vsDark;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Html, {\n    mdxType: \"Html\"\n  }, mdx(\"img\", {\n    width: \"100\",\n    src: \"https://github.com/breatheco-de/coding-guidelines-challenge/blob/master/src/assets/4geeks-icon.png?raw=true\"\n  })), mdx(\"p\", null, \"Hello \\uD83D\\uDC4B, Welcome to the readability challenge.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"This challenge is based on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://4geeks.com/lesson/coding-standards-guidelines\"\n  }), \"4Geeks proposed Coding Guidelines\"), \".\"), mdx(\"hr\", null), mdx(BlockQuote, {\n    author: \"Brian Kernighan\",\n    text: \"Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.\",\n    mdxType: \"BlockQuote\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/01-html-bug.html title=\\\"Find the bug in the code\\\"\",\n    \"file\": \"./src/01-html-bug.html\",\n    \"title\": \"\\\"Find\",\n    \"the\": true,\n    \"bug\": true,\n    \"in\": true,\n    \"code\\\"\": true\n  }), \"<html>\\n<body>\\n  <div>\\n  <h1>Welcome to my page!</h1>\\n  <p>Here you will find all sorts of interesting information</p>\\n      </div>\\n  <div>\\n  <h2>About me \\n  </h2>\\n      <p>I am a developer and love to create websites and apps. \\n        I also enjoy playing video games and reading books \\n        in my spare time.\\n</div>\\n</body>\\n</html>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"12\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/01-html-bug.html 12 title=\\\"There is a missing <p> tag\\\" showNumbers\",\n    \"file\": \"./src/01-html-bug.html\",\n    \"title\": \"\\\"There\",\n    \"is\": true,\n    \"a\": true,\n    \"missing\": true,\n    \"<p>\": true,\n    \"tag\\\"\": true,\n    \"showNumbers\": true\n  }), \"<html>\\n<body>\\n  <div>\\n  <h1>Welcome to my page!</h1>\\n  <p>Here you will find all sorts of interesting information</p>\\n      </div>\\n  <div>\\n  <h2>About me \\n  </h2>\\n      <p>I am a developer and love to create websites and apps. \\n        I also enjoy playing video games and reading books \\n        in my spare time.\\n</div>\\n</body>\\n</html>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/01-html-bug.html title=\\\"What best practices are missing?\\\"\",\n    \"file\": \"./src/01-html-bug.html\",\n    \"title\": \"\\\"What\",\n    \"best\": true,\n    \"practices\": true,\n    \"are\": true,\n    \"missing?\\\"\": true\n  }), \"<html>\\n<body>\\n  <div>\\n  <h1>Welcome to my page!</h1>\\n  <p>Here you will find all sorts of interesting information</p>\\n      </div>\\n  <div>\\n  <h2>About me \\n  </h2>\\n      <p>I am a developer and love to create websites and apps. \\n        I also enjoy playing video games and reading books \\n        in my spare time.\\n</div>\\n</body>\\n</html>\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    sizes: [1, 2],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Html, {\n    mdxType: \"Html\"\n  }, mdx(\"li\", null, \"Indentation\"), mdx(\"li\", null, \"Always Be Closing\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/01-html-bug.html\",\n    \"file\": \"./src/01-html-bug.html\"\n  }), \"<html>\\n<body>\\n  <div>\\n  <h1>Welcome to my page!</h1>\\n  <p>Here you will find all sorts of interesting information</p>\\n      </div>\\n  <div>\\n  <h2>About me \\n  </h2>\\n      <p>I am a developer and love to create websites and apps. \\n        I also enjoy playing video games and reading books \\n        in my spare time.\\n</div>\\n</body>\\n</html>\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Html, {\n    mdxType: \"Html\"\n  }, \"Almost all tags should be at the beginning of the line\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"12:16 file=./src/01.1-html-bug-fixed.html\",\n    \"12:16\": true,\n    \"file\": \"./src/01.1-html-bug-fixed.html\"\n  }), \"<html>\\n  <body>\\n    <div>\\n      <h1>Welcome to my page!</h1>\\n      <p>\\n        Here you will find all sorts of interesting\\n        information\\n      </p>\\n    </div>\\n    <div>\\n      <h2>About me</h2>\\n      <p>\\n        I am a developer and love to create websites and\\n        apps. I also enjoy playing video games and reading\\n        books in my spare time.\\n      </p>\\n    </div>\\n  </body>\\n</html>\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Html, {\n    mdxType: \"Html\"\n  }, \"Only small lines can close at the end of the same line\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"11\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"4 11 file=./src/01.1-html-bug-fixed.html\",\n    \"file\": \"./src/01.1-html-bug-fixed.html\"\n  }), \"<html>\\n  <body>\\n    <div>\\n      <h1>Welcome to my page!</h1>\\n      <p>\\n        Here you will find all sorts of interesting\\n        information\\n      </p>\\n    </div>\\n    <div>\\n      <h2>About me</h2>\\n      <p>\\n        I am a developer and love to create websites and\\n        apps. I also enjoy playing video games and reading\\n        books in my spare time.\\n      </p>\\n    </div>\\n  </body>\\n</html>\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Html, {\n    mdxType: \"Html\"\n  }, \"long text must have a line-length limit around 80 characters\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"6:7 file=./src/01.1-html-bug-fixed.html\",\n    \"6:7\": true,\n    \"file\": \"./src/01.1-html-bug-fixed.html\"\n  }), \"<html>\\n  <body>\\n    <div>\\n      <h1>Welcome to my page!</h1>\\n      <p>\\n        Here you will find all sorts of interesting\\n        information\\n      </p>\\n    </div>\\n    <div>\\n      <h2>About me</h2>\\n      <p>\\n        I am a developer and love to create websites and\\n        apps. I also enjoy playing video games and reading\\n        books in my spare time.\\n      </p>\\n    </div>\\n  </body>\\n</html>\\n\")))), mdx(\"hr\", null), mdx(BlockQuote, {\n    author: \"Phil Karlton\",\n    text: \"There are only two hard things in Computer Science: cache invalidation and naming things.\",\n    mdxType: \"BlockQuote\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/02-js-variable-names.js title=\\\"Choosing variable names\\\" subtitle=\\\"What is this code about?\\\"\",\n    \"file\": \"./src/02-js-variable-names.js\",\n    \"title\": \"\\\"Choosing\",\n    \"variable\": true,\n    \"names\\\"\": true,\n    \"subtitle\": \"\\\"What\",\n    \"is\": true,\n    \"this\": true,\n    \"code\": true,\n    \"about?\\\"\": true\n  }), \"function calc(nums) {\\n    let total = 0;\\n    for (let i = 0; i < nums.length; i++) {\\n      if (nums[i] > 0) {\\n        total += nums[i];\\n      }\\n    }\\n    return total;\\n  }\\n  \\n  const numbers = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10];\\n  console.log(calc(numbers));\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:12 file=./src/02.1-js-variable-names.js title=\\\"Can you read it now?\\\"\",\n    \"1:12\": true,\n    \"file\": \"./src/02.1-js-variable-names.js\",\n    \"title\": \"\\\"Can\",\n    \"you\": true,\n    \"read\": true,\n    \"it\": true,\n    \"now?\\\"\": true\n  }), \"function sumPositiveNumbers(numbers) {\\n  let positiveSum = 0;\\n  for (let i = 0; i < numbers.length; i++) {\\n    if (numbers[i] > 0) {\\n      positiveSum += numbers[i];\\n    }\\n  }\\n  return positiveSum;\\n}\\n\\nconst numbers = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10];\\nconsole.log(sumPositiveNumbers(numbers));\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [github, vsDark],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/02-js-variable-names.js title=\\\"Random variable names\\\"\",\n    \"file\": \"./src/02-js-variable-names.js\",\n    \"title\": \"\\\"Random\",\n    \"variable\": true,\n    \"names\\\"\": true\n  }), \"function calc(nums) {\\n    let total = 0;\\n    for (let i = 0; i < nums.length; i++) {\\n      if (nums[i] > 0) {\\n        total += nums[i];\\n      }\\n    }\\n    return total;\\n  }\\n  \\n  const numbers = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10];\\n  console.log(calc(numbers));\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/02.1-js-variable-names.js title=\\\"Descriptive variable names\\\"\",\n    \"file\": \"./src/02.1-js-variable-names.js\",\n    \"title\": \"\\\"Descriptive\",\n    \"variable\": true,\n    \"names\\\"\": true\n  }), \"function sumPositiveNumbers(numbers) {\\n  let positiveSum = 0;\\n  for (let i = 0; i < numbers.length; i++) {\\n    if (numbers[i] > 0) {\\n      positiveSum += numbers[i];\\n    }\\n  }\\n  return positiveSum;\\n}\\n\\nconst numbers = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10];\\nconsole.log(sumPositiveNumbers(numbers));\\n\")))), mdx(\"hr\", null), mdx(BlockQuote, {\n    author: \"Some guy\",\n    text: \"Using global variables is like living in a shared apartment. You might think it's convenient, but your roommate will always mess things up for you.\",\n    mdxType: \"BlockQuote\"\n  }), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    sizes: [1, 2],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Html, {\n    mdxType: \"Html\"\n  }, \"Why do you think using global variables is wrong in this code?\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/03-global-variables.js\",\n    \"file\": \"./src/03-global-variables.js\"\n  }), \"let result = 0;\\n\\nfunction add(x, y) {\\n  result = x + y;\\n}\\n\\nfunction subtract(x, y) {\\n  result = x - y;\\n}\\n\\nfunction accumulate(x) {\\n    result += x;\\n}\\n\\nadd(5, 10);\\nconsole.log(result);\\naccumulate(6);\\nsubtract(6, 12);\\nconsole.log(result);\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Html, {\n    mdxType: \"Html\"\n  }, \"Why is the `accumulate` risky?\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"11:13 file=./src/03-global-variables.js\",\n    \"11:13\": true,\n    \"file\": \"./src/03-global-variables.js\"\n  }), \"let result = 0;\\n\\nfunction add(x, y) {\\n  result = x + y;\\n}\\n\\nfunction subtract(x, y) {\\n  result = x - y;\\n}\\n\\nfunction accumulate(x) {\\n    result += x;\\n}\\n\\nadd(5, 10);\\nconsole.log(result);\\naccumulate(6);\\nsubtract(6, 12);\\nconsole.log(result);\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Html, {\n    mdxType: \"Html\"\n  }, \"Its hard to keep track of the `result` value\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"15:19 file=./src/03-global-variables.js\",\n    \"15:19\": true,\n    \"file\": \"./src/03-global-variables.js\"\n  }), \"let result = 0;\\n\\nfunction add(x, y) {\\n  result = x + y;\\n}\\n\\nfunction subtract(x, y) {\\n  result = x - y;\\n}\\n\\nfunction accumulate(x) {\\n    result += x;\\n}\\n\\nadd(5, 10);\\nconsole.log(result);\\naccumulate(6);\\nsubtract(6, 12);\\nconsole.log(result);\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Html, {\n    mdxType: \"Html\"\n  }, \"Switching the order of the lines generates very different output\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"15:19 file=./src/03.1-global-variables.js\",\n    \"15:19\": true,\n    \"file\": \"./src/03.1-global-variables.js\"\n  }), \"let result = 0;\\n\\nfunction add(x, y) {\\n  result = x + y;\\n}\\n\\nfunction subtract(x, y) {\\n  result = x - y;\\n}\\n\\nfunction accumulate(x) {\\n    result += x;\\n}\\n\\nadd(5, 10);\\nconsole.log(result);\\nsubtract(6, 12);\\naccumulate(6);\\nconsole.log(result);\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [github, vsDark],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/03-global-variables.js title=\\\"With global vars\\\"\",\n    \"file\": \"./src/03-global-variables.js\",\n    \"title\": \"\\\"With\",\n    \"global\": true,\n    \"vars\\\"\": true\n  }), \"let result = 0;\\n\\nfunction add(x, y) {\\n  result = x + y;\\n}\\n\\nfunction subtract(x, y) {\\n  result = x - y;\\n}\\n\\nfunction accumulate(x) {\\n    result += x;\\n}\\n\\nadd(5, 10);\\nconsole.log(result);\\naccumulate(6);\\nsubtract(6, 12);\\nconsole.log(result);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:12 file=./src/03.2-global-variables-fix.js title=\\\"Without global vars\\\"\",\n    \"1:12\": true,\n    \"file\": \"./src/03.2-global-variables-fix.js\",\n    \"title\": \"\\\"Without\",\n    \"global\": true,\n    \"vars\\\"\": true\n  }), \"function add(x, y) {\\n  return x + y;\\n}\\n\\nfunction subtract(x, y) {\\n  return x - y;\\n}\\n\\nfunction accumulate(x) {\\n  // This function is not longer possible\\n}\\n\\nconsole.log(add(5, 10));\\nconsole.log(subtract(6, 12));\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    sizes: [1, 2],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Html, {\n    mdxType: \"Html\"\n  }, \"How can you accumulate without global variables?\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:12 file=./src/03.2-global-variables-fix.js\",\n    \"1:12\": true,\n    \"file\": \"./src/03.2-global-variables-fix.js\"\n  }), \"function add(x, y) {\\n  return x + y;\\n}\\n\\nfunction subtract(x, y) {\\n  return x - y;\\n}\\n\\nfunction accumulate(x) {\\n  // This function is not longer possible\\n}\\n\\nconsole.log(add(5, 10));\\nconsole.log(subtract(6, 12));\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Html, {\n    mdxType: \"Html\"\n  }, \"Store the result in a variable and pass it to the next function call\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"10:11 file=./src/03.3-global-variables-accumulate.js\",\n    \"10:11\": true,\n    \"file\": \"./src/03.3-global-variables-accumulate.js\"\n  }), \"function add(x, y) {\\n  return x + y;\\n}\\n\\nfunction subtract(x, y) {\\n  return x - y;\\n}\\n\\nconst result = add(5, 10);\\nconsole.log(result);\\nconst accumulate = add(result, 6);\\nconsole.log(subtract(accumulate, 12));\\n\")))), mdx(\"hr\", null), mdx(BlockQuote, {\n    author: \"Some other guy\",\n    text: \"Using nested conditions is like playing Jenga. You keep adding more and more conditions, and it all seems stable, but one wrong move and the whole thing collapses.\",\n    mdxType: \"BlockQuote\"\n  }), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    sizes: [1, 2],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Html, {\n    mdxType: \"Html\"\n  }, \"How can we remove the \\\"else\\\" statement from this function?\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/04.1-nested-conditionals-simple.js\",\n    \"file\": \"./src/04.1-nested-conditionals-simple.js\"\n  }), \"function isOldEnoughToDrive(age) {\\n  if (age > 16) {\\n    return \\\"Yes\\\"\\n  } else {\\n    return \\\"No\\\";\\n  }\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Html, {\n    mdxType: \"Html\"\n  }, \"More than 50% of the time, else statements are not needed\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"4 file=./src/04.1-nested-conditionals-simple.js\",\n    \"file\": \"./src/04.1-nested-conditionals-simple.js\"\n  }), \"function isOldEnoughToDrive(age) {\\n  if (age > 16) {\\n    return \\\"Yes\\\"\\n  } else {\\n    return \\\"No\\\";\\n  }\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Html, {\n    mdxType: \"Html\"\n  }, \"We know that \\\"return\\\" statements stop the function execution.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/04.1.2-nested-conditionals-simple-fix.js\",\n    \"file\": \"./src/04.1.2-nested-conditionals-simple-fix.js\"\n  }), \"function isOldEnoughToDrive(age) {\\n  if (age > 16) return \\\"Yes\\\"\\n  return \\\"No\\\";\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Html, {\n    mdxType: \"Html\"\n  }, \"This line of code will never execute if age > 16\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"3 file=./src/04.1.2-nested-conditionals-simple-fix.js\",\n    \"file\": \"./src/04.1.2-nested-conditionals-simple-fix.js\"\n  }), \"function isOldEnoughToDrive(age) {\\n  if (age > 16) return \\\"Yes\\\"\\n  return \\\"No\\\";\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    sizes: [1, 2],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Html, {\n    mdxType: \"Html\"\n  }, \"How can this code be improved?\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/04.2-nested-conditionals.js\",\n    \"file\": \"./src/04.2-nested-conditionals.js\"\n  }), \"function numberIsDivisible(num) {\\n  if (num > 0) {\\n    if (num % 2 === 0) {\\n      if (num % 3 === 0) {\\n        return \\\"Divisible by 2 and 3\\\";\\n      } else {\\n        return \\\"Divisible by 2\\\";\\n      }\\n    } else {\\n      if (num % 3 === 0) {\\n        return \\\"Divisible by 3\\\";\\n      } else {\\n        return \\\"Not divisible by 2 or 3\\\";\\n      }\\n    }\\n  } else {\\n    return \\\"Number is not positive\\\";\\n  }\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Html, {\n    mdxType: \"Html\"\n  }, \"Avoid nesting conditionals\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/04.2.1-nested-conditionals-fix.js\",\n    \"file\": \"./src/04.2.1-nested-conditionals-fix.js\"\n  }), \"function numberIsDivisible(num) {\\n  if (num <= 0) {\\n    return \\\"Number is not positive\\\";\\n  }\\n  if (num % 2 === 0 && num % 3 === 0) {\\n    return \\\"Divisible by 2 and 3\\\";\\n  }\\n  if (num % 2 === 0) {\\n    return \\\"Divisible by 2\\\";\\n  }\\n  if (num % 3 === 0) {\\n    return \\\"Divisible by 3\\\";\\n  }\\n  return \\\"Not divisible by 2 or 3\\\";\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [github, vsDark],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/04.2-nested-conditionals.js title=\\\"Nested conditionals\\\"\",\n    \"file\": \"./src/04.2-nested-conditionals.js\",\n    \"title\": \"\\\"Nested\",\n    \"conditionals\\\"\": true\n  }), \"function numberIsDivisible(num) {\\n  if (num > 0) {\\n    if (num % 2 === 0) {\\n      if (num % 3 === 0) {\\n        return \\\"Divisible by 2 and 3\\\";\\n      } else {\\n        return \\\"Divisible by 2\\\";\\n      }\\n    } else {\\n      if (num % 3 === 0) {\\n        return \\\"Divisible by 3\\\";\\n      } else {\\n        return \\\"Not divisible by 2 or 3\\\";\\n      }\\n    }\\n  } else {\\n    return \\\"Number is not positive\\\";\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/04.2.1-nested-conditionals-fix.js title=\\\"Without nested conditionals\\\"\",\n    \"file\": \"./src/04.2.1-nested-conditionals-fix.js\",\n    \"title\": \"\\\"Without\",\n    \"nested\": true,\n    \"conditionals\\\"\": true\n  }), \"function numberIsDivisible(num) {\\n  if (num <= 0) {\\n    return \\\"Number is not positive\\\";\\n  }\\n  if (num % 2 === 0 && num % 3 === 0) {\\n    return \\\"Divisible by 2 and 3\\\";\\n  }\\n  if (num % 2 === 0) {\\n    return \\\"Divisible by 2\\\";\\n  }\\n  if (num % 3 === 0) {\\n    return \\\"Divisible by 3\\\";\\n  }\\n  return \\\"Not divisible by 2 or 3\\\";\\n}\\n\")))), mdx(\"hr\", null), mdx(BlockQuote, {\n    author: \"The wise man\",\n    text: \"Rushing to code is like trying to beat a red light. You might get there faster, but it's not worth the risk.\",\n    mdxType: \"BlockQuote\"\n  }), mdx(\"hr\", null), mdx(Html, {\n    style: {\n      padding: \"60px\"\n    },\n    mdxType: \"Html\"\n  }, mdx(\"h4\", null, \"Now it's time to read some of your and your classmates code:\"), mdx(\"ul\", {\n    style: {\n      fontSize: \"30px\"\n    }\n  }, mdx(\"li\", null, \"Let's split the class as many groups as possible as long as there is one mentor in the group.\"), mdx(\"li\", null, \"For example: If there are 2 mentors in a class of 10 students, the we will have 2 groups of 5 students each.\"), mdx(\"li\", null, \"Open old projects and propose refectoring options that do follow the coding guidelines.\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","isCreatedByStatefulCreatePages":false,"id":"548f554b-9f09-5069-bd9b-f3c292296d4e","slug":"","title":""}}}